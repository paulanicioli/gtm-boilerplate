{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { ConsentStatus } from 'src/app/models/consent';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/consent.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nconst _c0 = a0 => ({\n  \"show-banner\": a0\n});\n/**\n * Cookie Banner Component.\n */\nexport let CookieBannerComponent = /*#__PURE__*/(() => {\n  class CookieBannerComponent {\n    constructor(consentService, fb) {\n      this.consentService = consentService;\n      this.fb = fb;\n      this.showOverlay = false;\n    }\n    /**\n     * Show cookie consent if first time on site, else save preferences.\n     */\n    ngOnInit() {\n      if (!this.consentService.hasConsentCookie) {\n        this.showOverlay = true;\n      }\n      const transformedConsent = this.transformConsentForForm(this.consentService.getCurrentConsent());\n      this.consentForm = this.fb.group(transformedConsent);\n    }\n    /**\n     * Toggle the cookie banner overlay to show or be hidden.\n     */\n    toggleCookieBanner() {\n      this.showOverlay = !this.showOverlay;\n    }\n    /**\n     * Accept all the consent options and save the form.\n     */\n    acceptAll() {\n      this.changeAllCheckBoxes(true);\n      this.save();\n    }\n    /**\n     * Deny all the consent options and save the form.\n     */\n    denyAll() {\n      this.changeAllCheckBoxes(false);\n      this.save();\n    }\n    /**\n     * Change all the checkboxes in the form to either true of false.\n     * @param state the state to change the checkboxes to\n     */\n    changeAllCheckBoxes(state) {\n      for (const controlName in this.consentForm.controls) {\n        if (this.consentForm.controls.hasOwnProperty(controlName)) {\n          const control = this.consentForm.get(controlName);\n          if (control instanceof FormControl) {\n            control.setValue(state);\n          }\n        }\n      }\n    }\n    /**\n     * Transform the consent form from booleans to granted/denied.\n     */\n    transformConsentFromForm() {\n      return {\n        'ad_storage': this.consentForm.value.ad_storage === true ? ConsentStatus.GRANTED : ConsentStatus.DENIED,\n        'analytics_storage': this.consentForm.value.analytics_storage === true ? ConsentStatus.GRANTED : ConsentStatus.DENIED,\n        'ad_user_data': this.consentForm.value.ad_user_data === true ? ConsentStatus.GRANTED : ConsentStatus.DENIED,\n        'ad_personalization': this.consentForm.value.ad_personalization === true ? ConsentStatus.GRANTED : ConsentStatus.DENIED\n      };\n    }\n    /**\n     * Transform the consent into booleans for use in the form.\n     * @param consent the consent to transform.\n     * @return An object resembling the consent but in boolean form, where\n     *  granted is true, and denied is false.\n     */\n    transformConsentForForm(consent) {\n      return {\n        ad_storage: consent.ad_storage === ConsentStatus.GRANTED,\n        ad_user_data: consent.ad_user_data === ConsentStatus.GRANTED,\n        analytics_storage: consent.analytics_storage === ConsentStatus.GRANTED,\n        ad_personalization: consent.ad_personalization === ConsentStatus.GRANTED\n      };\n    }\n    /**\n     * Save the output of the form, and update consent preferences.\n     */\n    save() {\n      this.showOverlay = false;\n      const newConsent = this.transformConsentFromForm();\n      console.log('Your consent has been set as: ');\n      console.log(newConsent);\n      this.consentService.setCurrentConsent(newConsent);\n    }\n    static #_ = this.ɵfac = function CookieBannerComponent_Factory(t) {\n      return new (t || CookieBannerComponent)(i0.ɵɵdirectiveInject(i1.ConsentService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CookieBannerComponent,\n      selectors: [[\"app-cookie-banner\"]],\n      decls: 29,\n      vars: 4,\n      consts: [[\"id\", \"cookie-banner-overlay\", 3, \"ngClass\"], [1, \"cookie-banner-container\"], [1, \"cookie-banner-text\"], [\"id\", \"cookie-consent-form\", \"onsubmit\", \"onCookieFormSubmit()\", 3, \"formGroup\"], [1, \"form-group\"], [\"type\", \"checkbox\", \"id\", \"ad_storage\", \"formControlName\", \"ad_storage\"], [\"for\", \"ad_storage\"], [\"type\", \"checkbox\", \"id\", \"ad_user_data\", \"formControlName\", \"ad_user_data\"], [\"for\", \"ad_user_data\"], [\"type\", \"checkbox\", \"id\", \"ad_personalization\", \"formControlName\", \"ad_personalization\"], [\"for\", \"ad_personalization\"], [\"type\", \"checkbox\", \"id\", \"analytics_storage\", \"formControlName\", \"analytics_storage\"], [\"for\", \"analytics_storage\"], [1, \"cookie-btns\"], [1, \"default\", \"btn\", 3, \"click\"], [1, \"btn\", 3, \"click\"], [\"id\", \"cookie-banner-icon\", 3, \"click\"], [\"src\", \"assets/images/cookie.png\", \"alt\", \"cookie icon\"]],\n      template: function CookieBannerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h1\");\n          i0.ɵɵtext(4, \"Cookie Settings\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"form\", 3)(6, \"div\", 4);\n          i0.ɵɵelement(7, \"input\", 5);\n          i0.ɵɵelementStart(8, \"label\", 6);\n          i0.ɵɵtext(9, \" Ad Storage\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(10, \"input\", 7);\n          i0.ɵɵelementStart(11, \"label\", 8);\n          i0.ɵɵtext(12, \" Ad User Data\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(13, \"div\", 4);\n          i0.ɵɵelement(14, \"input\", 9);\n          i0.ɵɵelementStart(15, \"label\", 10);\n          i0.ɵɵtext(16, \" Ad Personalization\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(17, \"input\", 11);\n          i0.ɵɵelementStart(18, \"label\", 12);\n          i0.ɵɵtext(19, \" Analytics Storage\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(20, \"div\", 13)(21, \"a\", 14);\n          i0.ɵɵlistener(\"click\", function CookieBannerComponent_Template_a_click_21_listener() {\n            return ctx.acceptAll();\n          });\n          i0.ɵɵtext(22, \"Accept All\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(23, \"a\", 14);\n          i0.ɵɵlistener(\"click\", function CookieBannerComponent_Template_a_click_23_listener() {\n            return ctx.denyAll();\n          });\n          i0.ɵɵtext(24, \"Deny All\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"a\", 15);\n          i0.ɵɵlistener(\"click\", function CookieBannerComponent_Template_a_click_25_listener() {\n            return ctx.save();\n          });\n          i0.ɵɵtext(26, \"Save Custom\");\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(27, \"div\", 16);\n          i0.ɵɵlistener(\"click\", function CookieBannerComponent_Template_div_click_27_listener() {\n            return ctx.toggleCookieBanner();\n          });\n          i0.ɵɵelement(28, \"img\", 17);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(2, _c0, ctx.showOverlay));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"formGroup\", ctx.consentForm);\n        }\n      },\n      dependencies: [i3.NgClass, i2.ɵNgNoValidate, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.FormControlName],\n      styles: [\"#cookie-banner-overlay[_ngcontent-%COMP%]{position:absolute;inset:0;animation:_ngcontent-%COMP%_fadeIn .1s;animation-fill-mode:forwards;display:none;z-index:1}#cookie-banner-overlay.show-banner[_ngcontent-%COMP%]{display:block}@keyframes _ngcontent-%COMP%_fadeIn{0%{background:#0000}to{background:#000c}}#cookie-banner-icon[_ngcontent-%COMP%]{position:fixed;bottom:5px;right:5px}#cookie-banner-icon[_ngcontent-%COMP%]:hover{background:#03dac5;border-radius:50px;cursor:pointer}#cookie-banner-icon[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{height:60px}.cookie-banner-container[_ngcontent-%COMP%]{background:#251b32;max-width:550px;padding:20px;margin:80px auto}.cookie-banner-text[_ngcontent-%COMP%]   form[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{margin-bottom:25px;margin-left:7px}.cookie-banner-container[_ngcontent-%COMP%]   .btn[_ngcontent-%COMP%]{margin-right:7px}\"]\n    });\n  }\n  return CookieBannerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}