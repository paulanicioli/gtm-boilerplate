{"ast":null,"code":"import { js_beautify } from 'js-beautify';\nimport { environment } from 'src/environments/environment';\nimport { EcommerceEventName } from '../models/ecommerce-events';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"angular-google-tag-manager\";\nimport * as i2 from \"./products.service\";\n/**\n * Service for sending ecommerce events to Google Tag Manager.\n */\nexport let EcommerceEventsService = /*#__PURE__*/(() => {\n  class EcommerceEventsService {\n    constructor(gtmService, productService) {\n      this.gtmService = gtmService;\n      this.productService = productService;\n      this.events = [];\n    }\n    /**\n     * For the given products return as Items in ecommerce datalayer schema.\n     * @param products the products to format.\n     * @return an array of Items for all of the products.\n     */\n    getItems(products) {\n      const items = [];\n      for (const product of Object.values(products)) {\n        const productVariant = this.productService.getDefaultProductVariant(product);\n        items.push(this.getItem(product, productVariant));\n      }\n      return items;\n    }\n    /**\n     * For the given basket return as Item in ecommerce datalayer schema.\n     * @param basket the basket to get the items from.\n     * @return an array of Items for all of the products in the basket.\n     */\n    getItemsFromBasket(basket) {\n      const items = [];\n      for (const basketProduct of Object.values(basket)) {\n        items.push(this.getItem(basketProduct.product, basketProduct.productVariant, basketProduct.quantity));\n      }\n      return items;\n    }\n    /**\n     * For the given product return as an Item in ecommerce datalayer schema.\n     * @param product the product to format.\n     * @param productVariant the product variant to format.\n     * @param quantity optionally provide the quantity to use.\n     * @return an ecommerce Item for of the product.\n     */\n    getItem(product, productVariant, quantity = 1) {\n      return {\n        item_id: productVariant.sku,\n        item_name: product.name,\n        price: productVariant.price,\n        quantity,\n        item_variant: productVariant.name\n      };\n    }\n    /**\n     * Output the event to the console.\n     * @param event the event to output\n     */\n    logEvent(event) {\n      console.log('Generated ecommerce event:', event);\n    }\n    /**\n     * Generate a view_item_list event.\n     * @param products the products to use in the items array.\n     * @return a view_item_list ecommerce event.\n     */\n    getViewItemListEvent(products) {\n      const event = {\n        event: EcommerceEventName.VIEW_ITEM_LIST,\n        ecommerce: {\n          items: this.getItems(products)\n        }\n      };\n      this.logEvent(event);\n      return event;\n    }\n    /**\n     * Generate a view_item event.\n     * @param product the product to use in the items array.\n     * @param productVariant the variant of the product to use.\n     * @return a view_item ecommerce event.\n     */\n    getViewItemEvent(product, productVariant) {\n      const event = {\n        event: EcommerceEventName.VIEW_ITEM,\n        ecommerce: {\n          currency: environment.currency,\n          value: productVariant.price,\n          items: [this.getItem(product, productVariant)]\n        }\n      };\n      this.logEvent(event);\n      return event;\n    }\n    /**\n     * Generate a add_to_cart event.\n     * @param product the product to use in the items array.\n     * @param productVariant the product variant being added.\n     * @param quantity the quantity being added\n     * @return an add_to_cart ecommerce event.\n     */\n    getAddToCartEvent(product, productVariant, quantity = 1) {\n      const event = {\n        event: EcommerceEventName.ADD_TO_CART,\n        ecommerce: {\n          currency: environment.currency,\n          value: productVariant.price,\n          items: [this.getItem(product, productVariant, quantity)]\n        }\n      };\n      this.logEvent(event);\n      return event;\n    }\n    /**\n     * Generate a remove_from_cart event.\n     * @param product the product to use in the items array.\n     * @param productVariant the product variant being added.\n     * @param quantity the quantity being added\n     * @return an add_to_cart ecommerce event.\n     */\n    getRemoveFromCartEvent(product, productVariant, quantity = 1) {\n      const event = {\n        event: EcommerceEventName.REMOVE_FROM_CART,\n        ecommerce: {\n          currency: environment.currency,\n          value: productVariant.price,\n          items: [this.getItem(product, productVariant, quantity)]\n        }\n      };\n      this.logEvent(event);\n      return event;\n    }\n    /**\n     * Generate a view_cart event.\n     * @param basket the basket containing the products.\n     * @param value the total value of the basket.\n     * @return a view_cart ecommerce event.\n     */\n    getViewCartEvent(basket, value) {\n      const event = {\n        event: EcommerceEventName.VIEW_CART,\n        ecommerce: {\n          currency: environment.currency,\n          value,\n          items: this.getItemsFromBasket(basket)\n        }\n      };\n      this.logEvent(event);\n      return event;\n    }\n    /**\n     * Generate a purchase event.\n     * @param basket the basket containing the products.\n     * @param value the total value of the basket.\n     * @param transaction_id the ID of the transaction.\n     * @return a purchase ecommerce event.\n     */\n    getPurchaseEvent(basket, value, transaction_id) {\n      const event = {\n        event: EcommerceEventName.PURCHASE,\n        ecommerce: {\n          currency: environment.currency,\n          value,\n          items: this.getItemsFromBasket(basket),\n          transaction_id\n        }\n      };\n      this.logEvent(event);\n      return event;\n    }\n    /**\n     * Send the view_item_list event to GTM.\n     * @param products the products to include.\n     */\n    sendViewItemListEvent(products) {\n      // clear previous ecommerce object\n      this.gtmService.pushTag({\n        ecommerce: null\n      });\n      const event = this.getViewItemListEvent(products);\n      this.gtmService.pushTag(event);\n      this.events.unshift(this.formatEcommerceEventAsString(event));\n    }\n    /**\n     * Send the view_item event to GTM.\n     * @param product the product to include.\n     * @param productVariant the variant of the product to use.\n     */\n    sendViewItemEvent(product, productVariant) {\n      // clear previous ecommerce object\n      this.gtmService.pushTag({\n        ecommerce: null\n      });\n      const event = this.getViewItemEvent(product, productVariant);\n      this.gtmService.pushTag(event);\n      this.events.unshift(this.formatEcommerceEventAsString(event));\n    }\n    /**\n     * Send the add_to_cart event to GTM.\n     * @param product the products to include.\n     * @param productVariant the product variant being added.\n     * @param quantity the quantity being added.\n     */\n    sendAddToCartEvent(product, productVariant, quantity = 1) {\n      // clear previous ecommerce object\n      this.gtmService.pushTag({\n        ecommerce: null\n      });\n      const event = this.getAddToCartEvent(product, productVariant, quantity);\n      this.gtmService.pushTag(event);\n      this.events.unshift(this.formatEcommerceEventAsString(event));\n    }\n    /**\n     * Send the remove_from_cart event to GTM.\n     * @param product the products to include.\n     * @param productVariant the product variant being removed.\n     * @param quantity the quantity being removed. This should be positive, so 1\n     *   if 1 item is being removed.\n     */\n    sendRemoveFromCartEvent(product, productVariant, quantity) {\n      // clear previous ecommerce object\n      this.gtmService.pushTag({\n        ecommerce: null\n      });\n      const event = this.getRemoveFromCartEvent(product, productVariant, quantity);\n      this.gtmService.pushTag(event);\n      this.events.unshift(this.formatEcommerceEventAsString(event));\n    }\n    /**\n     * Send the view_cart event to GTM.\n     * @param basket the basket containing the products.\n     * @param value the total value of the basket.\n     */\n    sendViewCartEvent(basket, value) {\n      // clear previous ecommerce object\n      this.gtmService.pushTag({\n        ecommerce: null\n      });\n      const event = this.getViewCartEvent(basket, value);\n      this.gtmService.pushTag(event);\n      this.events.unshift(this.formatEcommerceEventAsString(event));\n    }\n    /**\n     * Send the purchase event to GTM.\n     * @param basket the basket containing the products.\n     * @param value the total value of the basket.\n     * @param transaction_id the ID of the transaction.\n     */\n    sendPurchaseEvent(basket, value, transaction_id) {\n      // clear previous ecommerce object\n      this.gtmService.pushTag({\n        ecommerce: null\n      });\n      const event = this.getPurchaseEvent(basket, value, transaction_id);\n      this.gtmService.pushTag(event);\n      this.events.unshift(this.formatEcommerceEventAsString(event));\n    }\n    /**\n     * Format a given EcommerceEvent as a string.\n     * @param event the event to format.\n     * @return the event as a string.\n     */\n    formatEcommerceEventAsString(event) {\n      const eventJson = JSON.stringify(event);\n      const options = {\n        indent_size: 2,\n        space_in_empty_paren: true,\n        brace_style: 'expand'\n      };\n      return js_beautify(eventJson, options);\n    }\n    static #_ = this.ɵfac = function EcommerceEventsService_Factory(t) {\n      return new (t || EcommerceEventsService)(i0.ɵɵinject(i1.GoogleTagManagerService), i0.ɵɵinject(i2.ProductsService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EcommerceEventsService,\n      factory: EcommerceEventsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return EcommerceEventsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}