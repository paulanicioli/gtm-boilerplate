{"ast":null,"code":"/**\n * @fileoverview A service to manage user login/logouts in the app.\n *\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\n/**\n * A service to manage user login/logouts in the app.\n */\nexport let LoginService = /*#__PURE__*/(() => {\n  class LoginService {\n    constructor(cookieService, document) {\n      this.cookieService = cookieService;\n      this.document = document;\n      this.isLoggedIn = false;\n      this.cookieName = 'login-cookie';\n      this.cookieExpiryDays = 365;\n      this.nullUser = {\n        id: null,\n        name: null,\n        email: null\n      };\n      this.user = this.getUserFromCookie();\n      this.getDataLayerFromPage();\n    }\n    /**\n     * Pull the datalayer from the page.\n     */\n    getDataLayerFromPage() {\n      const defaultView = this.document.defaultView;\n      if (defaultView != null && 'dataLayer' in defaultView) {\n        this.dataLayer = defaultView.dataLayer;\n      }\n    }\n    /**\n     * Log in a user.\n     * @param user the user to login\n     */\n    logUserIn(user) {\n      this.user = user;\n      this.setUserInDataLayer(user);\n      this.isLoggedIn = true;\n      this.setUserInCookie();\n    }\n    /**\n     * Set a user in the datalayer.\n     * @param user the user to login.\n     */\n    setUserInDataLayer(user) {\n      if (user !== undefined) {\n        this.dataLayer.push({\n          user\n        });\n      }\n    }\n    /**\n     * Log out a user.\n     */\n    logUserOut() {\n      this.isLoggedIn = false;\n      this.cookieService.delete(this.cookieName);\n      this.setUserInDataLayer(this.nullUser);\n    }\n    /**\n     * Set the user in the cookie for persistence.\n     */\n    setUserInCookie() {\n      const expiryDate = new Date();\n      expiryDate.setTime(expiryDate.getTime() + this.cookieExpiryDays * 24 * 60 * 60 * 1000);\n      this.cookieService.set(this.cookieName, JSON.stringify(this.user), expiryDate);\n    }\n    /**\n     * Get the user from the cookie.\n     * @returns the user based on what's stored in the cookie\n     */\n    getUserFromCookie() {\n      const loginCookie = this.cookieService.get(this.cookieName);\n      // Cookie has not been set - return defaults\n      if (loginCookie === '') {\n        return this.nullUser;\n      } else {\n        const user = JSON.parse(loginCookie);\n        this.isLoggedIn = true;\n        return user;\n      }\n    }\n    static #_ = this.ɵfac = function LoginService_Factory(t) {\n      return new (t || LoginService)(i0.ɵɵinject(i1.CookieService), i0.ɵɵinject(DOCUMENT));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: LoginService,\n      factory: LoginService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return LoginService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}