{"ast":null,"code":"/**\n * @fileoverview a service for managing the user's consent with GTM.\n *\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DOCUMENT } from '@angular/common';\nimport { BehaviorSubject } from 'rxjs';\nimport { ConsentStatus, ConsentUpdate } from '../models/consent';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-cookie-service\";\n/**\n * A service for managing the user's consent with GTM.\n */\nexport let ConsentService = /*#__PURE__*/(() => {\n  class ConsentService {\n    constructor(cookieService, document, injectedGtag) {\n      this.cookieService = cookieService;\n      this.document = document;\n      this.injectedGtag = injectedGtag;\n      // Set the default consent to denied\n      this.currentConsent = {\n        'ad_storage': ConsentStatus.DENIED,\n        'ad_user_data': ConsentStatus.DENIED,\n        'ad_personalization': ConsentStatus.DENIED,\n        'analytics_storage': ConsentStatus.DENIED\n      };\n      this.cookieName = 'consent-cookie';\n      this.cookieExpiryDays = 365;\n      // Need to send the consent signal first, so this allows others to subscribe\n      this.isInitialized = new BehaviorSubject(false);\n      this.hasConsentCookie = false;\n      this.initialize();\n    }\n    /**\n     * Set the service up to be ready for use.\n     * Set the initial consent to denied, check to see if the cookie has been set\n     * with the user's preferences, and if so send an update.\n     */\n    initialize() {\n      if (!this.injectedGtag) {\n        this.getGtagFromPage();\n      } else {\n        this.gtag = this.injectedGtag;\n      }\n      this.updateGtagConsent(ConsentUpdate.DEFAULT);\n      this.getConsentFromCookie();\n      if (this.hasConsentCookie === true) {\n        this.updateGtagConsent(ConsentUpdate.UPDATE);\n      }\n      this.isInitialized.next(true);\n    }\n    /**\n     * Get the current consent.\n     */\n    getCurrentConsent() {\n      return this.currentConsent;\n    }\n    /**\n     * Set the current consent status, and ensure cookie and tagging are updated.\n     * @param consent the new consent\n     */\n    setCurrentConsent(consent) {\n      this.currentConsent = consent;\n      this.updateGtagConsent(ConsentUpdate.UPDATE);\n      this.setConsentCookie();\n    }\n    /**\n     * Pull the gTag function from the page and set the service attribute.\n     */\n    getGtagFromPage() {\n      const defaultView = this.document.defaultView;\n      if (defaultView != null && 'gtag' in defaultView) {\n        this.gtag = defaultView.gtag;\n      }\n    }\n    /**\n     * Update the consent settings in Google Tag Manager.\n     * @param consentUpdate: the type of consent update to apply, e.g. default\n     */\n    updateGtagConsent(consentUpdate) {\n      if (this.gtag() === undefined) {\n        this.gtag('consent', consentUpdate, this.currentConsent);\n      } else {\n        console.error('gtag has not been assigned.');\n      }\n    }\n    /**\n     * Check the cookie to see if the consent has been set previously.\n     */\n    getConsentFromCookie() {\n      const consentCookie = this.cookieService.get(this.cookieName);\n      if (consentCookie === '') {\n        this.hasConsentCookie = false;\n      } else {\n        this.hasConsentCookie = true;\n        const consent = JSON.parse(consentCookie);\n        console.log('You have a cookie set with these preferences:', consent);\n        this.currentConsent = consent;\n      }\n    }\n    /**\n     * Store the consent of the user in a cookie.\n     */\n    setConsentCookie() {\n      const expiryDate = new Date();\n      expiryDate.setTime(expiryDate.getTime() + this.cookieExpiryDays * 24 * 60 * 60 * 1000);\n      this.cookieService.set(this.cookieName, JSON.stringify(this.currentConsent), expiryDate);\n    }\n    static #_ = this.ɵfac = function ConsentService_Factory(t) {\n      return new (t || ConsentService)(i0.ɵɵinject(i1.CookieService), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject('gtag', 8));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ConsentService,\n      factory: ConsentService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ConsentService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}